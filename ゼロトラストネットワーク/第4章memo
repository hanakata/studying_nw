第4章 認可の判断

認可アーキテクチャ
ゼロトラストの認可アーキテクチャは4つの主要コンポーネントで構成される
・エンフォーサー
→認可の判断に直接影響を及ぼす
・ポリシーエンジン
→実際の判断を下す
・トラストエンジン
→信用スコアの計算
・データストア
→情報源
これらはすべて役割が違うので別のシステムとして扱う。
これらのコンポーネントはセキュリティ上切り離されていることがベスト。
最も重要な要素なのでセキュリティレベルには細心の注意が払われるべき。
1つにまとめる際は慎重に。

エンフォーサー
エンフォーサーの責務は2つ
・ポリシーエンジンとのやり取り
・判断の実際の導入と継続的な適用
同時にするか別々にするかは選択可能。
→ユースケースによって決まる
エンフォーサーはデータプレーンで判断結果を適用するためエンドポイントのできるだけ近くに配置しなければならない。
→改ざんする機会が増えるのでセキュリティを弱体化させる恐れがある。

ポリシーエンジン
エンフォーサーから送信されてくるリクエストが許可されるかを判断するためにそれらのリクエストをポリシーと比較する。
判断結果はエンフォーサーに返して実際に適用される。
ポリシーエンジンとエンフォーサーが並べて配置されることがある。
ポリシーエンジンとエンフォーサーはプロセスレベルで切り離しておくことが最善。
→エンフォーサーは大体攻撃される。そのついでにポリシーエンジンを攻撃されると安全性が損なわれるため。

ポリシーストレージ
ポリシーエンジンによって参照されるルールは別で格納すべき。理由は以下
・ポリシー変更履歴を管理できる
・ポリシー変更の経緯をバージョン管理システムでトラックできる
・ポリシー適用時の機体される動作を実際のエンフォーサーに対してテストできる。

よいポリシーの特徴
ゼロトラストモデルではネットワークの観点からポリシーを定義するわけではなく
ネットワークに存在する論理コンポーネントの観点からポリシーを定義する。
論理コンポーネントは以下の要素で構成される
・ネットワークサービス
・デバイスエンドポイントクラス
・ユーザロール
論理コンポーネントからポリシーを定義すればポリシーエンジンがネットワークの
現在の状態に基づいてポリシーの適用を決定できるようになる。

ポリシーを定義するのは誰か
ポリシーは細かく設定するべきもの。
→運用負荷がかなり高くなる。
　→ほとんどの場合はいくつかのチームに分担させる。
ワークフローは2つ。
・ポリシーに対する変更をほかの人にレビューさせることで変更内容を十分に検討することができる。
・細かなポリシーの上に広範なインフラストラクチャーポリシー層を追加すること

トラストエンジン
ゼロトラストネットワークにおいて特定のリクエストやアクションに対するリスク分析を
行うシステム。
システムの責務は特定のリクエスト/アクションを許可することの危険度を定量的に評価すること。
定量的に評価は難しい。
なので静的ルールに加えて機械学習モデルも導入してルールを定義する。

スコア化すべきエンティティ
ネットワークエージェントとそのエージェントを構成しているエンティティをスコア化するのが正しい解決に思える。
ただし定義時に検討するスコアが多いと難易度が上がりエラーが起きやすくなる。
理想はスコアを1つだけつくる世界。

危険とみなされるスコア公開
スコアは機密情報ではないがエンドユーザーに公開するのは控えるべき。
他人のスコアが見えるということは攻撃者にチャンスを与えるようなもの。
ただ信用スコアが見えないとエンドユーザーがどの行動で下がったかわからない。
なのでバランスが重要。

データストア
システムの現在と過去の状態を保管する情報源。
データストアはトラストエンジンによって信用スコアを生成するために使用される。
信用スコアはポリシーエンジンによって使用される。
データストアは主にインベントリと履歴の2種類に分類される。
インベントリ＝一貫したデータストアであり対象となるリソースの現在の状態を記録する。
履歴＝特定のリクエストやアクションに関連するリスクを評価するために最近や過去の振る舞いやパターンを調べるために利用する。