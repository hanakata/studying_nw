第8章 トラフィックの信頼と信用

暗号化と認証
暗号化と認証は隣り合わせの関係にあるが、目的はまったく違う。
暗号化＝機密性を確保
認証＝送信者を受信者が検証可能＋完全性
→とにかく認証すべき

暗号化なしで真正性は確保できるか
暗号化は結構厄介。トラフィック調査するにしても復号化が必須。
機密性がないのも問題なので暗号化は必要。

信頼の確立：最初のパケット
フローの最初のパケットは厄介で接続の種類やデバイスのライフライムのタイミング次第で
ほとんど信頼できない可能性がある。
mTLSなどのプロトコルを使えばデバイスを認証してからサービスにアクセスさせることができる。
ファーストパケット問題には事前認証と呼ばれる手法で解決が可能
使う場合はUDP.事前認証オペレーションはSPAと呼ばれる。

fwknop
オープンソースSPA実装。特徴は以下
・一時的な例外
fwknopが有効なSPAパケットを受信すると復号され検証される。
ペイロードにはプロトコルとポート番号が含まれる。
それをもとにファイアウォールを定義することができる。
・SPAペイロード
ペイロードは以下
　16バイトのランダムデータ
　ローカルユーザ名
　ローカルタイムスタンプ
　fwknopのバージョン
　SPAメッセージタイプ
　アクセスリクエスト
　SPAメッセージダイジェスト
・暗号化
暗号化関してはAESとGPGの2種類がサポートされている。
少人数であればAES。大人数になるとGPG
・HMAC
ペイロードの最後につける真正性を保証するデータ。

ネットワークモデルの概要
ネットワークスタックはデータ送信において様々な責任を負っている。
そおためネットワークスタックのコードは煩雑になりがち。
→標準化し明確に定義することを決定。

ネットワークの各層
ネットワークはレイヤという考え方。OSIネットワークモデルが主流

OSIネットワークモデル
OSI参照モデルは7つのレイヤで定義されている。
レイヤ1:物理層
物理媒体間のインターフェイスとして定義
レイヤ2:データリンク層
物理層上のデータ通信を管理する。
レイヤ3:ネットワーク層
データパケットの送受信管理
レイヤ4:トランスポート層
・ステート降る接続
・多重化
・配信の順序付け
・フロー制御
・再送信
これらのサービスを提供
レイヤ5:セッション層
接続の状態に関するレイヤ。
レイヤ6:プレゼンテーション層
アプリケーションデータと伝送可能なデータストリーム間の変換を受け持つ。
レイヤ7:アプリケーション層
アプリケーションがネットワーク上での通信に使用する高度な通信プロトコルを提供

TCP/IPネットワークモデル
OSI参照モデルとは違い厳密な層を定義するわけではないが以下の層が定義されている。
・リンク層
・インターネット層
・トランスポート層
・アプリケーション層

ゼロトラストはネットワークモデルのどこに位置するか
ネットワークセキュリティスイートとして優勢なのはTLSとIPsec
ゼロトラストの目標はすべてのトラフィックに対するセキュアな通信。
デフォルトでセキュアな通信を実現するシステムを構築するにはIPsecが最適。

クライアントとサーバの分離
IPSecはあまり普及していない。課題は3つ
・ネットワークのサポートの問題
IPSecはESPとAHというプロトコルをサポートするがこれらのプロトコルは単純なLANネットワークでは問題ないものの
ネットワーク次第でフィルタされている場合がある。AWSでも許可されていない。
・デバイスのサポートの問題
IPSecはカーネルで実装されるため普及されづらい
・アプリケーションのサポートの問題
一般的なTLSベースのセキュリティと比較するとIPSecはシステム設定に関して追加の要件がある。
IPSecよりTLSのライブラリベースの手法のほうが簡単なためそっちを使うことが圧倒的に多い。

現実的なアプローチ
・クライアントとサーバ間のやり取りではmTLSが合理的。
・サーバ間のやり取りではIPSecが扱いやすい

プロトコル
mTLSおよびIPSecには導入する際仕組みを理解することが非常に重要

IKE/IPSec
IKEは認証を行うプロトコルでありIPSecの鍵交換コンポーネントである。
IPSecは単一のプロトコルではなくプロトコルの集まり。
IKEはIPSecのコントロールプレーンとして考えることができる。
IKEはセッションネゴシエーションと認証に対応しネゴシエーションの結果に基づきセッション鍵と
暗号化アルゴリズムを使ってエンドポイントを設定する。

認証のクレデンシャル
IKEｖ２は事前共有鍵と公開鍵/秘密鍵のペア、EAPまでサポートしている。
IKEの認証は証明書を使用するのが望ましい。

IKE_SA_INITとIKE_AUTH
IKEv2の鍵交換はすべてIKE_SA_INITというペアのパケットから始まる。
最初の交換で暗号スイートが選択されDiffie-Hellman鍵交換が実施される。
結果として得られたセッション鍵は次のメッセージペア（IKE_AUTHパケット）のフィールドを暗号化するために使用される。

暗号スイートの選択
IPSecはカーネルで実装されるため暗号サポートが他より複雑になる。
→OSやバージョン等で変わる。

IPSecのセキュリティアソシエーション
SAはIKEネゴシエーションの最終的な結果でありエンドポイントとのリレーションシップと呼ばれるものを表す。
SAは単方向のためインバウンドとアウトバウンドの2つのSAが使用される。
IPSecSAはライフタイムを持つ。

IPSecのトンネルモードとトランスポートモード
IPSecはトンネルモードとトランスポートの2つのモードをサポートしている。
トンネルモードのIPSecで広く導入されているのはトンネルモード。
IPSecではリモートエンドポイントとの間でSAが確立されIPパケットのカプセル化とエンドポイントに向かう途中の保護に使用。
トンネルモードではトラフィックのカプセル化が解除されると新しいIPヘッダが出てくる
→これがトンネルと呼ばれるもの。
トランスポートモードはセキュリティは同レベルを保証するがIPペイロードのみがカプセル化される。

デバイス認証のためのIKE/IPSec
IPSecはカーネル実装のためアプリケーションがそれを知る必要はない。
→自動的に暗号化される。

相互認証TLS
TLSはWebトラフィックを保護するためによく使われるプロトコル。
Webの場合サーバ証明書は有効だがクライアントが証明書を提示することはほぼない。
TLSの場合、クライアントからHelloパケットを投げサーバ側はHello+証明書を返す
クライアントから証明書と鍵を送りサーバ側で検証し問題がなければ完了。

暗号スイートのネゴシエーションと選択
TLSの暗号スイートは以下4つ
・鍵交換
・認証
・バルク暗号化
・メッセージ認証
TLSデプロイメントのセキュリティを確保するためにはサポートされている正しい暗号スイートを選択することが重要。

選択権は誰にあるか
TLSハンドシェイクではサポートされている暗号スイートに優先順位を付けたリストをクライアントが指定する。
そのリストからサーバが暗号スイートを選択する。
そのため全体のセキュリティは最も脆弱なクライアントのネゴシエーション可能な暗号スイートのうち、
最も強力なものに制限される。

鍵交換
TLSでの鍵交換/共有プロトコルは3つ。
・ECDH
→鍵の暗号に楕円曲線を利用。セキュリティとパフォーマンスの両面で理想的な選択肢
・DHE
→モジュラー演算を利用して計算。ECDHほど効果的ではない。
・RSA
→よく使われているが制限はRSAベースの認証を使用しなければならないこと、PFSを提供しなければならないこと
PFSとは？
→秘密鍵が漏洩したとしてもすでにネゴシエートされたセッションのセキュリティは侵害されない暗号化の特性。

曲線に注意
暗号化に利用されている楕円曲線について定数が解読されていて安全性に問題があるとの指摘もある。
そのためDHEを推奨される場合もある。

認証
一般的な認証方式は以下。
・RSA
→圧倒的に使われている
・DSA
→推奨されない
・ECDSA
→将来性

責務の分離
ゼロトラストネットワークでは暗号化の責務をアプリケーション自体から切り離すのが良い考え。
分離することでゼロデイの緩和、パフォーマンスの低下、監査といった数々の問題とも相性が良い。
IPsecは設計の一部だが、TLSはそうではない。
このパターンの問題点は共通ライブラリがインフラのあちこちに散在し様々なプロジェクトに利用され
いろいろなバージョンが利用されるようになること。

バルク暗号化
TLSハンドシェイクには認証とセッション鍵の生成という目的がある。
TLSハンドシェイクは計算量が異常に多い。
→これをすべてのトラフィックに適用するとパフォーマンスに影響する。
バルク暗号化を利用する場合はAESを利用すること。

メッセージの真正性
暗号化に機密性はあるが真正性がない場合、メッセージの完全性をどう保証するか。
AES-GCMなどの暗号モードでは機密性と真正性が保たれるがバルク暗号化だけ。
選択肢としてはMD5とSHAファミリの2つ。

デバイス認証のためのmTLS
TLSにも長所と短所がある。
TLSは基本TCPでの実装だが時にはDTLSと呼ばれるUDPで提供されるタイプもある。
→ネットワークスタックの位置による問題
　→応答パケットロスの問題が発生する可能性がある。
TLSは境界ネットワークにインフラストラクチャーサービスとしてデプロイされるのが一般的。
中間デバイスとパイプラインの上流のエンドポイントがコンピュータネットワークによって
分離されている限りこのオペレーションモードはゼロトラストネットワークに適していない。
→外部セキュリティの層を通じてやり取りするようアプリケーションを設定するための自動化が必須。

フィルタリング
フィルタリングとは？
ネットワーク上のシステムによってパケットを許可や拒否するプロセス。
フィルタリングは以下の3つに分けることができる。
・ホストフィルタリング
→ホストのネットワークトラフィックをホスト自身にフィルタリングさせることが目標。
ホストフィルタリングを利用することでネットワークトラフィックの削減される。
・ブックエンドフィルタリング
→パケットの受信時だけでなく送信時にもポリシーが適用される。→イグレスと呼ばれる。イングレスの逆。
ウィルスに感染している場合の対応。
・中間フィルタリング
→ゼロトラストネットワークでのトラフィックのフィルタリングに送信者または受信者以外のデバイスが参加すべきという考え方。
トラフィックのフィルタリングはゼロトラストネットワークとインターネットの間に配置された境界システムでフィルタリングを行うのが理想

