第7章 アプリケーションの信頼と信用

アプリケーションパイプライン
コンピュータシステム内でのコードの生成、デプロイ、実行は非常にデリケートなイベントの連鎖
→攻撃範囲を広げるために利用できるので恰好の標的。
検知も難しいため各ステージが1つ残らず保護されるようにする必要がある。
→サプライチェーンセキュリティ
パイプラインの信用は以下のステージに分割できる
・ソースコード
・ビルド/コンパイル
・ディストリビューション
・実行

ソースコードの信用
ソースコードはソフトウェアを実行するための最初のステップ
→信用されない人が書いたコードを信用するのは難しい
ゼロトラストネットワークでは開発者から信用を取り上げることではなく悪用されたコードを特定することが重要。

リポジトリの保護
ソフトウェアリポジトリの保護に関しては効果的なセキュリティ手法が確立されている。
ただこれには最小アクセスの原則といった基本原理が含まれる。
→当座の作業を完了させるのに必要なリポジトリへのアクセスだけがユーザに与えられる。
ただし分散型の場合はこれを適用するのは少々難しい。

コードの真正性と監査証跡
VCSは暗号技術を用いて履歴を保存する。
→連想ストレージという手法。データベースのオブジェクトの識別子として格納されるデータのハッシュ値を使用する。
　→一度格納されたファイルの変更は不可能。
コミットするユーザを偽のものにして登録することも可能。
ただしそれを防ぐためにGPG鍵でコミットやタグに署名できる機能がある。
署名付きのソースコードは大きな利益を生み出すので署名付きにできるだけするほうが良い。

コードレビュー
大きな権限を一人のユーザに集中させるのは危険。
署名を行っても誰が書いたかは特定できるが正しい、あるいは安全という保証はない。
そのためコードレビューを行う必要がある。

ビルドの信用
ビルドサーバは標的型攻撃を受けやすい

リスク
ビルドシステムを信用するには以下3つを確認する必要がある
・ビルドシステムがビルドしたソースは意図したコードである
・ビルドプロセスとその設定は意図したものである
・改ざんされていない
ビルドシステムは署名されたコードを読み込んで署名された出力を生成するが、
ビルドそのものは一般的に暗号によって保護されない。
→ここが攻撃対象となりしかも気づけない

信用できる入力、信用できる出力
ビルドシステムを信用対象としたいオペレーションとして考えてみた場合、信用される出力を生成するには
そのオペレーションの入力を信用しなければならない。
入力としてビルドシステムはバージョン管理システムを利用しソースの信用性を検証する責務がある。
バージョン管理はソースやタグ、コミットにまで署名すること。
ビルドシステムはその署名を検証するべき。
ビルドの設定も重要な入力の1つなので、設定もソース管理システムに配置しバージョン管理の対象とすべき。

再現可能なビルド
再現可能で冪等性をもった方法でコンパイルされることが重要。
ローカルでコンパイルされているものと比較することで安全性が確保できる。

リリースバージョンと成果物バージョンを切り離す
イミュータブルなビルドはビルドシステムとリリースシステムのセキュリティを確保するために重要
ビルドシステムは書き込みは1度だけ、読み込みは何度でもというのが理想。

ディストリビューションの信用
ビルド成果物を選択してパイプラインの下流のステージに提供することをディストリビューションと呼ぶ

成果物のリリース対象化
昇格はビルド成果物を正式なバージョンとして指定する行為
リリースするとバージョンは固定されるが、通常であればバージョンは先に出る。
なのでビルド番号とバージョン番号をリリースエンジニアが決めてそれをエンジニアに伝える方法が良い。

ディストリビューションのセキュリティ
各ディストリビューションで管理システムがあり、そこで検証することが可能。

完全性と真正性
検証に使われるのはハッシュ化と署名。

ディストリビューションネットワークの信用
ソフトウェアディストリビューションの利用者が多いなどの場合、スケーリングや可用性を考えて
複数の場所にコピーするのが一般的。→ミラーサイト
コピーされたものが信用できるかどうかは署名を確認する。

人間がかかわる部分を限定する
人間がかかわる部分を重要なポイントのみに限定してしまえば安全な状態に保つことができる。
コミットは人間がかかわる必要があるが、それ以降は関わる必要がない。